{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b664f5d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "dbfs_dir = 's3://projectnetflix/'\n",
    "training = dbfs_dir + 'TrainingRatings.txt'\n",
    "testing = dbfs_dir + 'TestingRatings.txt'\n",
    "movies = dbfs_dir + 'movie_titles.txt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "83aba59d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.types import *\n",
    "\n",
    "df_schema = StructType(\n",
    "  [StructField('movieID', IntegerType()),\n",
    "   StructField('userID', IntegerType()),\n",
    "   StructField('rating', DoubleType())]\n",
    ")\n",
    "\n",
    "movie_schema = StructType(\n",
    "  [StructField('movieID', IntegerType()),\n",
    "   StructField('releaseYear', IntegerType()),\n",
    "   StructField('title', StringType())]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "87f02c4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[movieID: int, releaseYear: int, title: string]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_data = sqlContext.read.format('csv').options(header=False, inferSchema=False).schema(df_schema).load(training)\n",
    "testing_data = sqlContext.read.format('csv').options(header=False, inferSchema=False).schema(df_schema).load(testing)\n",
    "movie_data = sqlContext.read.format('csv').options(header=False, inferSchema=False).schema(movie_schema).load(movies)\n",
    "\n",
    "training_data.cache()\n",
    "testing_data.cache()\n",
    "movie_data.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fdc1cbd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7cff12a8",
   "metadata": {},
   "source": [
    "<h3> ALS model </h3>\n",
    "<p> For prediction </p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5829a300",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.evaluation import RegressionEvaluator\n",
    "from pyspark.ml.recommendation import ALS\n",
    "from pyspark.sql import Row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d713d408",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[movieID: int, userID: int, rating: double, releaseYear: int, title: string]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Join test and train dataframe with movies \n",
    "\n",
    "joined_train = training_data.join(movie_data,on=['movieID'],how='inner')\n",
    "joined_test = testing_data.join(movie_data,on=['movieID'],how='inner')\n",
    "\n",
    "joined_train.cache()\n",
    "joined_test.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1bc28e12",
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = 124\n",
    "\n",
    "def testALS(maxIter, regParam, min_error = float('inf')):\n",
    "    print('For maxIter = %i and regParam = %.2f'%(maxIter, regParam))\n",
    "    als = ALS(maxIter=maxIter, regParam=regParam, \n",
    "              userCol=\"userID\", itemCol=\"movieID\", ratingCol=\"rating\",\n",
    "              coldStartStrategy=\"drop\")\n",
    "\n",
    "    mae_eval = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"rating\", metricName=\"mae\")\n",
    "    rmse_eval = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"rating\", metricName=\"rmse\")\n",
    "\n",
    "    tolerance = 0.03\n",
    "    ranks = [4, 8, 12]\n",
    "    all_mae = [0, 0, 0]\n",
    "    all_rmse = [0, 0, 0]\n",
    "    models = [0, 0, 0]\n",
    "    i = 0\n",
    "    best_rank = -1\n",
    "\n",
    "    for rank in ranks:\n",
    "        # Set the rank here:\n",
    "        als.setRank(rank)\n",
    "\n",
    "        # Create the model with these parameters.\n",
    "        model = als.fit(joined_train)\n",
    "\n",
    "        # Run the model to create a prediction. Predict against the validation_df.\n",
    "        predict_df = model.transform(joined_test)\n",
    "\n",
    "        # Remove NaN values from prediction (due to SPARK-14489)\n",
    "        #predicted_ratings_df = predict_df.filter(predict_df.prediction != float('nan'))\n",
    "\n",
    "        # Run the previously created MAE and RMSE evaluators, on the predicted_ratings_df DataFrame\n",
    "        mae = mae_eval.evaluate(predict_df)\n",
    "        all_mae[i] = mae\n",
    "\n",
    "        rmse = rmse_eval.evaluate(predict_df)\n",
    "        all_rmse[i] = rmse\n",
    "\n",
    "        models[i] = model\n",
    "        print('For rank %i the MAE is %.4f' % (rank, mae))\n",
    "        print('For rank %i the RMSE is %.4f' % (rank, rmse))\n",
    "        if rmse < min_error:\n",
    "            min_error = rmse\n",
    "            best_rank = i\n",
    "        i += 1\n",
    "\n",
    "    als.setRank(ranks[best_rank])\n",
    "    print('The best model was trained with rank %i\\n\\n' % ranks[best_rank])\n",
    "    my_model = models[best_rank]\n",
    "    return min_error, my_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c381baf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For maxIter = 5 and regParam = 0.10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 4 the MAE is 0.6914\n",
      "For rank 4 the RMSE is 0.8708\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 8 the MAE is 0.6877\n",
      "For rank 8 the RMSE is 0.8643\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 12 the MAE is 0.6908\n",
      "For rank 12 the RMSE is 0.8666\n",
      "The best model was trained with rank 8\n",
      "\n",
      "\n",
      "For maxIter = 5 and regParam = 0.08\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 4 the MAE is 0.6920\n",
      "For rank 4 the RMSE is 0.8708\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 8 the MAE is 0.6848\n",
      "For rank 8 the RMSE is 0.8604\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 12 the MAE is 0.6881\n",
      "For rank 12 the RMSE is 0.8627\n",
      "The best model was trained with rank 8\n",
      "\n",
      "\n",
      "For maxIter = 10 and regParam = 0.01\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 4 the MAE is 0.6783\n",
      "For rank 4 the RMSE is 0.8595\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 8 the MAE is 0.6620\n",
      "For rank 8 the RMSE is 0.8436\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 804:==========================================>          (160 + 8) / 200]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For rank 12 the MAE is 0.6621\n",
      "For rank 12 the RMSE is 0.8480\n",
      "The best model was trained with rank 8\n",
      "\n",
      "\n",
      "CPU times: user 591 ms, sys: 105 ms, total: 696 ms\n",
      "Wall time: 2min 24s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "#Testing multiple parameter values to find best model\n",
    "\n",
    "error, best_model = testALS(5, 0.1)\n",
    "error, best_model = testALS(5, 0.08, error)\n",
    "error, best_model = testALS(10, 0.01, error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90a6d5dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "589b0e97",
   "metadata": {},
   "source": [
    "<h3> New user recommendation </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f5fc598c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 806:=================================================>       (7 + 1) / 8]21/12/14 17:56:56 WARN Utils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.debug.maxToStringFields' in SparkEnv.conf.\n",
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+\n",
      "|userID|\n",
      "+------+\n",
      "|     7|\n",
      "|    79|\n",
      "|   199|\n",
      "|   481|\n",
      "|   769|\n",
      "+------+\n",
      "\n",
      "+------+\n",
      "|userID|\n",
      "+------+\n",
      "|     7|\n",
      "|    79|\n",
      "|   199|\n",
      "|   481|\n",
      "|   769|\n",
      "+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import countDistinct\n",
    "\n",
    "#Checking to see which userID can be used\n",
    "training_data.select('userID').distinct().orderBy('userID', ascending=True).limit(5).show()\n",
    "testing_data.select('userID').distinct().orderBy('userID', ascending=True).limit(5).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb492407",
   "metadata": {},
   "source": [
    "Since userIDs start form 7 in both testing and training data, I can use any number before as my userID. <br>\n",
    "I choose to select id as 4. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4acce0b0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c39e3bfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_user_id = 4\n",
    "\n",
    "my_rated_movies = [\n",
    "    (my_user_id, 10676, 4),\n",
    "    (my_user_id, 14810, 4),\n",
    "    (my_user_id, 16162, 2),\n",
    "    (my_user_id, 11340, 5),\n",
    "    (my_user_id, 4556, 2),\n",
    "    (my_user_id, 6250, 4),\n",
    "    (my_user_id, 13334, 1),\n",
    "    (my_user_id, 11312, 1),\n",
    "    (my_user_id, 15731, 5),\n",
    "    (my_user_id, 10109, 4)]\n",
    "\n",
    "my_rated_movies = sqlContext.createDataFrame(my_rated_movies, ['userID','movieID','rating'])\n",
    "my_rated_movies = my_rated_movies.join(movie_data,on=['movieID'],how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b14d3c47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My rated movies are:\n",
      "+-------+------+------+-----------+-----------------------------------+\n",
      "|movieID|userID|rating|releaseYear|title                              |\n",
      "+-------+------+------+-----------+-----------------------------------+\n",
      "|10676  |4     |4     |1933       |The Kennel Murder Case / Nancy Drew|\n",
      "|14810  |4     |4     |2000       |Dolphins: IMAX                     |\n",
      "|16162  |4     |2     |2002       |Kim Possible: The Secret Files     |\n",
      "|11340  |4     |5     |1988       |Johnny Be Good                     |\n",
      "|4556   |4     |2     |2001       |Stealing Time                      |\n",
      "|6250   |4     |4     |1997       |Female Perversions                 |\n",
      "|13334  |4     |1     |2000       |Catfish in Black Bean Sauce        |\n",
      "|11312  |4     |1     |1998       |Mystery Kids                       |\n",
      "|15731  |4     |5     |2002       |Roxy Music: Live at the Apollo     |\n",
      "|10109  |4     |4     |1994       |Major League II                    |\n",
      "+-------+------+------+-----------+-----------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('My rated movies are:')\n",
    "my_rated_movies.show(truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "66e603ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "joined_train = joined_train.union(my_rated_movies)\n",
    "\n",
    "als = ALS(maxIter=10, regParam=0.01, \n",
    "              userCol=\"userID\", itemCol=\"movieID\", ratingCol=\"rating\",\n",
    "              coldStartStrategy=\"drop\")\n",
    "\n",
    "model = als.fit(joined_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "139b38ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "recs = list(model.recommendForUserSubset(my_rated_movies.select('userID').distinct(), 10).select('recommendations')\\\n",
    "            .toPandas()['recommendations'])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "86375ff5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommended movies for my user are:\n",
      "\n",
      "Linkin Park\n",
      "Maxim: The Real Swimsuit DVD: Vol. 1\n",
      "Vietnam: We Were Heroes 1st Cavalry Division Airmobile\n",
      "Kiss: Unauthorized Kiss\n",
      "The Deviants\n",
      "Learning HTML: No Brainers\n",
      "The Cars: Live\n",
      "Raging Bull: Collector's Edition: Bonus Material\n",
      "Secrets of War: Nazi Warfare\n",
      "Dance for Camera\n"
     ]
    }
   ],
   "source": [
    "print('Recommended movies for my user are:\\n')\n",
    "for (title, rating) in recs:\n",
    "    print(movie_data.filter(movie_data.movieID == title).collect()[0][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5c8badcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[movieID: int, userID: int, rating: double, releaseYear: int, title: string]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Manually removing all cached dataframes\n",
    "training_data.unpersist()\n",
    "testing_data.unpersist()\n",
    "movie_data.unpersist()\n",
    "\n",
    "joined_train.unpersist()\n",
    "joined_test.unpersist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59db3958",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
